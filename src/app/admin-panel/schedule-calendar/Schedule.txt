
import React, { useState, useEffect } from 'react';

const MONTH_NAMES = [
  'January', 'February', 'March', 'April', 'May', 'June',
  'July', 'August', 'September', 'October', 'November', 'December'
];

const DAYS = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];

const themes = [
  { value: 'blue', label: 'Blue' },
  { value: 'red', label: 'Red' },
  { value: 'green', label: 'Green' },
  { value: 'yellow', label: 'Yellow' },
  { value: 'purple', label: 'Purple' },
];

const Schedule = () => {
  const [month, setMonth] = useState(new Date().getMonth());
  const [year, setYear] = useState(new Date().getFullYear());
  const [noOfDays, setNoOfDays] = useState([]);
  const [blankDays, setBlankDays] = useState([]);
  const [events, setEvents] = useState([
    { id: 1, event_date: new Date(2020, 3, 1), event_title: "April Fool's Day", event_theme: "blue", start_time: "09:00", end_time: "12:00" },
    { id: 2, event_date: new Date(2020, 3, 10), event_title: "Birthday", event_theme: "red", start_time: "14:00", end_time: "16:00" },
    { id: 3, event_date: new Date(2020, 3, 16), event_title: "Upcoming Event", event_theme: "green", start_time: "10:00", end_time: "12:00" },
  ]);
  const [eventTitle, setEventTitle] = useState('');
  const [eventDate, setEventDate] = useState('');
  const [eventTheme, setEventTheme] = useState('blue');
  const [startTime, setStartTime] = useState('09:00');
  const [endTime, setEndTime] = useState('10:00');
  const [openEventModal, setOpenEventModal] = useState(false);
  const [editingEvent, setEditingEvent] = useState(null);

  const [openMoreEventsModal, setOpenMoreEventsModal] = useState(false);
  const [moreEventsDate, setMoreEventsDate] = useState(null);


  useEffect(() => {
    getNoOfDays();
  }, [month, year]);

  const isToday = (date) => {
    const today = new Date();
    const d = new Date(year, month, date);
    return today.toDateString() === d.toDateString();
  };

  const getNoOfDays = () => {
    const daysInMonth = new Date(year, month + 1, 0).getDate();
    const dayOfWeek = new Date(year, month).getDay();
    const blankdaysArray = Array(dayOfWeek).fill(null);
    const daysArray = Array.from({ length: daysInMonth }, (_, index) => index + 1);
    setBlankDays(blankdaysArray);
    setNoOfDays(daysArray);
  };

  const showEventModal = (date) => {
    setOpenEventModal(true);
    setEventDate(new Date(year, month, date).toDateString());
    setEditingEvent(null); // Reset the editing state when opening the modal
  };

  const showEditModal = (event) => {
    setOpenEventModal(true);
    setEventDate(new Date(event.event_date).toDateString());
    setEventTitle(event.event_title);
    setEventTheme(event.event_theme);
    setStartTime(event.start_time);
    setEndTime(event.end_time);
    setEditingEvent(event); // Set the event to be edited
  };

  const addEvent = () => {
    if (eventTitle === '') return;
    const newEvent = {
      id: events.length + 1, // Generate a simple ID (you can replace it with a better method in production)
      event_date: eventDate,
      event_title: eventTitle,
      event_theme: eventTheme,
      start_time: startTime,
      end_time: endTime,
    };
    setEvents([...events, newEvent]);
    clearEventForm();
  };

  const updateEvent = () => {
    if (eventTitle === '') return;
    const updatedEvent = {
      ...editingEvent,
      event_title: eventTitle,
      event_theme: eventTheme,
      start_time: startTime,
      end_time: endTime,
    };
    setEvents(events.map(event => event.id === updatedEvent.id ? updatedEvent : event));
    clearEventForm();
  };

  const deleteEvent = (id) => {
    setEvents(events.filter(event => event.id !== id));
  };

  const clearEventForm = () => {
    setEventTitle('');
    setEventDate('');
    setEventTheme('blue');
    setStartTime('09:00');
    setEndTime('10:00');
    setOpenEventModal(false);
    setEditingEvent(null);
  };

//   const showMoreEventsModal = (date) => {
//     setOpenEventModal(true);
//     setEventDate(new Date(year, month, date).toDateString()); // Store the date to display events for that date
//     setEditingEvent(null); // Reset editing state
//   };

const showMoreEventsModal = (date) => {
    setMoreEventsDate(new Date(year, month, date).toDateString());
    setOpenMoreEventsModal(true); // Open the More Events modal
};
  
  
  return (
    <div className="antialiased sans-serif h-screen">
      <div className="container mx-auto px-4 py-2 md:py-24">
        <div className="bg-white rounded-lg shadow overflow-hidden">
          <div className="flex items-center justify-between py-2 px-6">
            <div>
              <span className="text-lg font-bold text-gray-800">{MONTH_NAMES[month]}</span>
              <span className="ml-1 text-lg text-gray-600 font-normal">{year}</span>
            </div>
            <div className="border rounded-lg px-1" style={{ paddingTop: "2px" }}>
              <button
                type="button"
                className="leading-none rounded-lg transition ease-in-out duration-100 inline-flex cursor-pointer hover:bg-gray-200 p-1 items-center"
                disabled={month === 0}
                onClick={() => { setMonth(month - 1); }}
              >
                <svg className="h-6 w-6 text-gray-500 inline-flex leading-none" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              <div className="border-r inline-flex h-6"></div>
              <button
                type="button"
                className="leading-none rounded-lg transition ease-in-out duration-100 inline-flex items-center cursor-pointer hover:bg-gray-200 p-1"
                disabled={month === 11}
                onClick={() => { setMonth(month + 1); }}
              >
                <svg className="h-6 w-6 text-gray-500 inline-flex leading-none" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth="2" d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>
          </div>

          <div className="-mx-1 -mb-1">
            <div className="flex flex-wrap" style={{ marginBottom: "-40px" }}>
              {DAYS.map((day, index) => (
                <div style={{ width: "14.28%" }} className="px-2 py-2" key={index}>
                  <div className="text-gray-600 text-sm uppercase tracking-wide font-bold text-center">{day}</div>
                </div>
              ))}
            </div>

            <div className="flex flex-wrap border-t border-l">
  {blankDays.map((_, index) => (
    <div style={{ width: "14.28%", height: "120px" }} className="text-center border-r border-b px-4 pt-2" key={index}></div>
  ))}

  {noOfDays.map((date, index) => (
    <div style={{ width: "14.28%", height: "120px" }} className="px-4 pt-2 border-r border-b relative" key={index}>
      <div
        onClick={() => showEventModal(date)}
        className={`inline-flex w-6 h-6 items-center justify-center cursor-pointer text-center leading-none rounded-full transition ease-in-out duration-100 ${isToday(date) ? "bg-blue-500 text-white" : "text-gray-700 hover:bg-blue-200"}`}
      >
        {date}
      </div>

      {/* Container for events */}
      <div style={{ height: "calc(100% - 30px)", overflow: "hidden" }} className="mt-1 flex flex-col justify-between">
        
        {/* Events */}
        {events
          .filter((event) => new Date(event.event_date).toDateString() === new Date(year, month, date).toDateString())
          .slice(0, 1) // Show only the first event
          .map((event, eventIndex) => (
            <div key={eventIndex} className={`px-2 py-1 rounded-lg mt-1 overflow-hidden border ${event.event_theme === "blue" ? "border-blue-200 text-blue-800 bg-blue-100" : event.event_theme === "red" ? "border-red-200 text-red-800 bg-red-100" : event.event_theme === "yellow" ? "border-yellow-200 text-yellow-800 bg-yellow-100" : event.event_theme === "green" ? "border-green-200 text-green-800 bg-green-100" : "border-purple-200 text-purple-800 bg-purple-100"}`}>
              <p className="text-sm truncate leading-tight">{event.event_title}</p>
              <p className="text-xs">{event.start_time} - {event.end_time}</p>
              <button onClick={() => showEditModal(event)} className="text-sm text-blue-600 hover:underline mt-1">Edit</button>
              <button onClick={() => deleteEvent(event.id)} className="text-sm text-red-600 hover:underline mt-1 ml-2">Delete</button>
            </div>
          ))}
        
        {/* Show More button */}
        {events
          .filter((event) => new Date(event.event_date).toDateString() === new Date(year, month, date).toDateString())
          .length > 1 && (
            <button
              onClick={() => showMoreEventsModal(date)} // Open the modal to show all events for this date
              className="text-sm flex flex-start px-2 py-1 rounded-lg border-gray-400 text-gray-600 bg-gray-300 hover:bg-gray-400 hover:text-white mt-2"
            >
              {events
        .filter((event) => new Date(event.event_date).toDateString() === new Date(year, month, date).toDateString())
        .length - 1} More..
            </button>
          )}
      </div>
    </div>
  ))}
</div>

          </div>
        </div>
      </div>

      {openEventModal && (
        <div style={{ backgroundColor: "rgba(0, 0, 0, 0.8)" }} className="fixed z-40 top-0 right-0 left-0 bottom-0 h-full w-full">
          <div className="p-4 max-w-xl mx-auto absolute left-0 right-0 overflow-hidden mt-24">
            <div
              className="shadow absolute right-0 top-0 w-10 h-10 rounded-full bg-white text-gray-500 hover:text-gray-800 inline-flex items-center justify-center cursor-pointer"
              onClick={() => setOpenEventModal(false)}
            >
              <svg className="fill-current w-6 h-6" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24">
                <path
                  d="M16.192 6.344L11.949 10.586 7.707 6.344 6.293 7.758 10.535 12 6.293 16.242 7.707 17.656 11.949 13.414 16.192 17.656 17.606 16.242 13.364 12 17.606 7.758z"
                />
              </svg>
            </div>

            <div className="shadow rounded-lg bg-white overflow-hidden w-full block p-8">
              <h2 className="font-bold text-2xl mb-6 text-gray-800 border-b pb-2">{editingEvent ? 'Edit Event' : 'Add Event Details'}</h2>

              <div className="mb-4">
                <label className="text-gray-800 block mb-1 font-bold text-sm tracking-wide">Event title</label>
                <input
                  className="bg-gray-200 appearance-none border-2 border-gray-200 rounded-lg w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500"
                  type="text"
                  value={eventTitle}
                  onChange={(e) => setEventTitle(e.target.value)}
                />
              </div>

              <div className="mb-4">
                <label className="text-gray-800 block mb-1 font-bold text-sm tracking-wide">Event date</label>
                <input
                  className="bg-gray-200 appearance-none border-2 border-gray-200 rounded-lg w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500"
                  type="text"
                  value={eventDate}
                  readOnly
                />
              </div>

              <div className="inline-block w-64 mb-4">
                <label className="text-gray-800 block mb-1 font-bold text-sm tracking-wide">Select a theme</label>
                <div className="relative">
                  <select
                    onChange={(e) => setEventTheme(e.target.value)}
                    value={eventTheme}
                    className="block appearance-none w-full bg-gray-200 border-2 border-gray-200 hover:border-gray-500 px-4 py-2 pr-8 rounded-lg leading-tight focus:outline-none focus:bg-white focus:border-blue-500 text-gray-700"
                  >
                    {themes.map((theme) => (
                      <option key={theme.value} value={theme.value}>
                        {theme.label}
                      </option>
                    ))}
                  </select>
                  <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-gray-700">
                    <svg className="fill-current h-4 w-4" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20">
                      <path d="M9.293 12.95l.707.707L15.657 8l-1.414-1.414L10 10.828 5.757 6.586 4.343 8z" />
                    </svg>
                  </div>
                </div>
              </div>

              <div className="mb-4">
                <label className="text-gray-800 block mb-1 font-bold text-sm tracking-wide">Start Time</label>
                <input
                  type="time"
                  value={startTime}
                  onChange={(e) => setStartTime(e.target.value)}
                  className="bg-gray-200 appearance-none border-2 border-gray-200 rounded-lg w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500"
                />
              </div>

              <div className="mb-4">
                <label className="text-gray-800 block mb-1 font-bold text-sm tracking-wide">End Time</label>
                <input
                  type="time"
                  value={endTime}
                  onChange={(e) => setEndTime(e.target.value)}
                  className="bg-gray-200 appearance-none border-2 border-gray-200 rounded-lg w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-blue-500"
                />
              </div>

              <div className="mt-8 text-right">
                <button
                  type="button"
                  className="bg-white hover:bg-gray-100 text-gray-700 font-semibold py-2 px-4 border border-gray-300 rounded-lg shadow-sm mr-2"
                  onClick={() => setOpenEventModal(false)}
                >
                  Cancel
                </button>
                <button
                  type="button"
                  className="bg-gray-800 hover:bg-gray-700 text-white font-semibold py-2 px-4 border border-gray-700 rounded-lg shadow-sm"
                  onClick={editingEvent ? updateEvent : addEvent}
                >
                  {editingEvent ? 'Save Changes' : 'Save Event'}
                </button>
              </div>
            </div>
          </div>
        </div>
      )}

{openMoreEventsModal && moreEventsDate && (
  <div style={{ backgroundColor: "rgba(0, 0, 0, 0.8)" }} className="fixed z-40 top-0 right-0 left-0 bottom-0 h-full w-full">
    <div className="p-4 max-w-xl mx-auto absolute left-0 right-0 overflow-hidden mt-24">
      <div className="shadow rounded-lg bg-white overflow-hidden w-full block p-8">
        <h2 className="font-bold text-2xl mb-6 text-gray-800 border-b pb-2">All Events for {moreEventsDate}</h2>

        <div>
          {events
            .filter((event) => new Date(event.event_date).toDateString() === moreEventsDate)
            .map((event, eventIndex) => (
              <div
                key={eventIndex}
                className={`px-2 py-1 rounded-lg mt-1 overflow-hidden border ${event.event_theme === "blue" ? "border-blue-200 text-blue-800 bg-blue-100" : event.event_theme === "red" ? "border-red-200 text-red-800 bg-red-100" : event.event_theme === "yellow" ? "border-yellow-200 text-yellow-800 bg-yellow-100" : event.event_theme === "green" ? "border-green-200 text-green-800 bg-green-100" : "border-purple-200 text-purple-800 bg-purple-100"}`}
              >
                <p className="text-sm truncate leading-tight">{event.event_title}</p>
                <p className="text-xs">{event.start_time} - {event.end_time}</p>
                <button onClick={() => showEditModal(event)} className="text-sm text-blue-600 hover:underline mt-1">Edit</button>
                <button onClick={() => deleteEvent(event.id)} className="text-sm text-red-600 hover:underline mt-1 ml-2">Delete</button>
              </div>
            ))}
        </div>

        <div className="mt-8 text-right">
          <button
            type="button"
            className="bg-white hover:bg-gray-100 text-gray-700 font-semibold py-2 px-4 border border-gray-300 rounded-lg shadow-sm mr-2"
            onClick={() => setOpenMoreEventsModal(false)} // Close the modal
          >
            Close
          </button>
        </div>
      </div>
    </div>
  </div>
)}


    </div>
  );
};

export default Schedule;